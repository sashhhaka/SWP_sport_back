# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: docker:latest
services:
  - docker:dind

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - docker-compose -p test_sport -f compose/docker-compose-test.yml build --no-cache
    - docker-compose -p test_sport -f compose/docker-compose-test.yml up -d
    - docker-compose -p test_sport -f compose/docker-compose-test.yml exec -T adminpanel bash -c "while !</dev/tcp/db/5432; do sleep 1; done;"
    - docker-compose -p test_sport -f compose/docker-compose-test.yml exec -T adminpanel python manage.py makemigrations
    - docker-compose -p test_sport -f compose/docker-compose-test.yml exec -T adminpanel python manage.py migrate auth
    - docker-compose -p test_sport -f compose/docker-compose-test.yml exec -T adminpanel python manage.py migrate
    - docker-compose -p test_sport -f compose/docker-compose-test.yml exec -T adminpanel python3 -m pip install coverage
    - docker-compose -p test_sport -f compose/docker-compose-test.yml exec -T adminpanel coverage run manage.py test ach_admin #unit_tests
    - docker-compose -p test_sport -f compose/docker-compose-test.yml exec -T adminpanel coverage xml --include=ach_admin/*
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    when: on_success
    expire_in: 30 days

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  image: registry.gitlab.com/pipeline-components/pylint:latest
  script:
    - pylint --exit-zero --load-plugins=pylint_gitlab --output-format=gitlab-codeclimate:codeclimate.json **/*.py
  artifacts:
    reports:
      codequality: codeclimate.json
    when: always
    expire_in: 30 days


deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
